import { HandlersSet } from './types';
declare const _default: (method: string | undefined, relativePath: string, handlersSet: HandlersSet) => [RegExp, string, (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | (({ config, values, params, data }: {
    config: import("axios").AxiosRequestConfig;
    values: {
        [key: string]: string | number;
    };
    params: {
        [key: string]: any;
    };
    data: any;
}) => [number, any?, ({
    [key: string]: any;
} | undefined)?] | {
    status: number;
    data?: any;
    headers?: {
        [key: string]: any;
    } | undefined;
} | Promise<import("./types").MockResponse>) | undefined] | undefined;
export default _default;
//# sourceMappingURL=findHandler.d.ts.map