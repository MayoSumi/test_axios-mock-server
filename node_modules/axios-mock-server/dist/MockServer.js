"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPathRegExp = void 0;
var axios_1 = __importDefault(require("axios"));
var settle_1 = __importDefault(require("axios/lib/core/settle"));
var types_1 = require("./types");
var createLogString_1 = __importDefault(require("./createLogString"));
var makeResponse_1 = __importDefault(require("./makeResponse"));
var findAndCallHandler_1 = __importDefault(require("./findAndCallHandler"));
var createPathRegExp = function (path) {
    return new RegExp("^" + path.replace(/\/_[^/]+/g, '/[^/]+') + "$");
};
exports.createPathRegExp = createPathRegExp;
var default_1 = /** @class */ (function () {
    function default_1(route, client, baseURL) {
        if (baseURL === void 0) { baseURL = ''; }
        this.handlersSet = {};
        this.delayTime = 0;
        this.needsLog = false;
        this.baseURL = '';
        if (route)
            this.setBaseURL(baseURL)
                .setClient(client || axios_1.default)
                .setRoute(route);
    }
    default_1.prototype.setClient = function (client) {
        var _this = this;
        this.client = client;
        this.originalAdapter = client.defaults.adapter;
        client.defaults.adapter = function (config) {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var customConfig, result, res_1, _a, _b, _c, e_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            customConfig = __assign(__assign({}, config), { baseURL: config.baseURL || this.baseURL });
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 7, , 8]);
                            result = findAndCallHandler_1.default(customConfig, this.handlersSet);
                            if (!result && this.originalAdapter) {
                                this.originalAdapter(customConfig).then(resolve, reject);
                                return [2 /*return*/];
                            }
                            if (!result) return [3 /*break*/, 5];
                            _b = makeResponse_1.default;
                            if (!(result instanceof Promise)) return [3 /*break*/, 3];
                            return [4 /*yield*/, result];
                        case 2:
                            _c = _d.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _c = result;
                            _d.label = 4;
                        case 4:
                            _a = _b.apply(void 0, [_c, customConfig]);
                            return [3 /*break*/, 6];
                        case 5:
                            _a = { status: 404, config: customConfig };
                            _d.label = 6;
                        case 6:
                            res_1 = _a;
                            if (this.needsLog)
                                console.log(createLogString_1.default(customConfig, res_1.status));
                            setTimeout(function () { return settle_1.default(resolve, reject, res_1); }, this.delayTime);
                            return [3 /*break*/, 8];
                        case 7:
                            e_1 = _d.sent();
                            reject(e_1);
                            return [3 /*break*/, 8];
                        case 8: return [2 /*return*/];
                    }
                });
            }); });
        };
        return this;
    };
    default_1.prototype.setRoute = function (route) {
        var _this = this;
        route.forEach(function (r) {
            var pathRegExp = exports.createPathRegExp(r.path);
            types_1.httpMethods.forEach(function (method) {
                if (r.methods[method]) {
                    _this.handlersSet[method] = __spread((_this.handlersSet[method] || []), [
                        [pathRegExp, r.path, r.methods[method]]
                    ]);
                }
            });
        });
        return this;
    };
    default_1.prototype.setDelayTime = function (delayTime) {
        this.delayTime = delayTime;
        return this;
    };
    default_1.prototype.setBaseURL = function (baseURL) {
        this.baseURL = baseURL;
        return this;
    };
    default_1.prototype.reset = function () {
        this.setDelayTime(0).disableLog();
        this.handlersSet = {};
        return this;
    };
    default_1.prototype.restore = function () {
        if (!this.client)
            return;
        this.reset();
        delete this.client.defaults.adapter;
        if (this.originalAdapter) {
            this.client.defaults.adapter = this.originalAdapter;
            delete this.originalAdapter;
        }
        delete this.client;
        return this;
    };
    default_1.prototype.enableLog = function () {
        this.needsLog = true;
        return this;
    };
    default_1.prototype.disableLog = function () {
        this.needsLog = false;
        return this;
    };
    return default_1;
}());
exports.default = default_1;
//# sourceMappingURL=MockServer.js.map